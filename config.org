#+TITLE: anneKsiy's GNU Emacs Config
#+AUTHOR: Abdullah "anneKsiy" Adam

* Table of contents: :TOC:
  - [[Initial Config][Initial Config]]
  - [[Emacs GUI][Emacs GUI]]

* Initial Config
  ** The beginning
  This is the first GNU Emacs Config I have written from scratch, it starts here...

* Packages

#+begin_src emacs-lisp
(require 'package)

(setq package-archives '(("melpa" . "https://melpa.org/packages/")
                         ("org" . "https://orgmode.org/elpa/")
			 ("elpa" . "https://elpa.gnu.org/packages/")))

(package-initialize)
(unless package-archive-contents
  (package-refresh-contents))

(unless (package-installed-p 'use-package)
   (package-install 'use-package))

(require 'use-package)
(setq use-package-always-ensure t)
#+end_src

* General Tweaks

#+begin_src emacs-lisp
(use-package exec-path-from-shell
   :config (exec-path-from-shell-initialize))
(setq scroll-margin 8)
(setq scroll-conservatively 100)
(setq visual-bell t)
(setq ring-bell-function 'ignore)
#+end_src

* Emacs GUI

** UI Tweaks
   
#+begin_src emacs-lisp
;; (scroll-bar-mode -1)
(tool-bar-mode -1)
;; (tooltip-mode -1)
(set-fringe-mode 10) ; Give some breathing room
(defvar abu/default-font-size 110)
(column-number-mode)
(global-display-line-numbers-mode 1)
(setq display-line-numbers-type 'relative)
;; (menu-bar-mode -1)
;; Disable line numbers for some modes
(dolist (mode '(term-mode-hook
               shell-mode-hook
               treemacs-mode-hook
               eshell-mode-hook))
 (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+end_src

#+RESULTS:

** Fonts

#+begin_src emacs-lisp
(set-face-attribute 'default nil :font "Fantasque Sans Mono" :height 145)
#+end_src

** Theme

#+begin_src emacs-lisp
(use-package doom-themes
  :init (load-theme 'doom-nord t))
#+end_src

#+RESULTS:


** Rainbow Delimiters

#+begin_src emacs-lisp
(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

** All the icons
Remember to run M-x all-the-icons-install-fonts
#+begin_src emacs-lisp
(use-package all-the-icons)
#+end_src

** Modeline

#+begin_src emacs-lisp
(use-package doom-modeline
  :ensure t
  :init (doom-modeline-mode 1)
  :custom ((doom-modeline-height 20)))
#+end_src

** Which Key

#+begin_src emacs-lisp
(use-package which-key
  :init (which-key-mode)
  :diminish which-key-mode
  :config
  (setq which-key-idle-delay 0.3))
#+end_src

** Make ESC quit prompts

#+begin_src emacs-lisp
(global-set-key (kbd "<escape>") 'keyboard-escape-quit)
#+end_src

* Ivy Auto-complete

#+begin_src emacs-lisp
(use-package swiper)
(use-package ivy
  :diminish
  :bind (("C-s" . swiper)
         :map ivy-minibuffer-map
         ("TAB" . ivy-alt-done)	
         ("C-l" . ivy-alt-done)
         ("C-j" . ivy-next-line)
         ("C-k" . ivy-previous-line)
         :map ivy-switch-buffer-map
         ("C-k" . ivy-previous-line)
         ("C-l" . ivy-done)
         ("C-d" . ivy-switch-buffer-kill)
         :map ivy-reverse-i-search-map
         ("C-k" . ivy-previous-line)
         ("C-d" . ivy-reverse-i-search-kill))
  :config
  (ivy-mode 1))

(use-package ivy-rich
  :init
  (ivy-rich-mode 1))

;; counsel
(use-package counsel
  :bind (("M-x" . counsel-M-x)
         ("C-x b" . counsel-ibuffer)
         ("C-x C-f" . counsel-find-file)
         :map minibuffer-local-map
         ("C-r" . 'counsel-minibuffer-history)))
#+end_src

** Helpful

#+begin_src emacs-lisp
(use-package helpful
  :custom
  (counsel-describe-function-function #'helpful-callable)
  (counsel-describe-variable-function #'helpful-variable)
  :bind
  ([remap describe-function] . counsel-describe-function)
  ([remap describe-command] . helpful-command)
  ([remap describe-variable] . counsel-describe-variable)
  ([remap describe-key] . helpful-key))
#+end_src

* Key Bindings

** General Keybindings

#+begin_src emacs-lisp
(use-package general
  :config
  (general-create-definer abu/leader-keys
    :keymaps '(normal visual)
    :prefix "SPC"
    :global-prefix "C-SPC")

  (abu/leader-keys
    "SPC" '(counsel-M-x :which-key "M-x")
    "t" '(:ignore t :which-key "treemacs")
    "T" '(:ignore t :which-key "Toggles")
    "g" '(:ignore t :which-key "Git")
    "b" '(:ignore t :which-key "Buffers")
    "bb" '(ibuffer :which-key "All Buffers")
    "bp" '(previous-buffer :which-key "Previous Buffer")
    "b TAB" '(mode-line-other-buffer :which-key "Toggle Recent Buffers")
    "bn" '(next-buffer :which-key "Next Buffer")
    "Tt" '(counsel-load-theme :which-key "Choose theme")))
#+end_src

#+RESULTS:
: t

** Evil Mode

#+begin_src emacs-lisp
(use-package evil
  :init
  (setq evil-want-integration t)
  (setq evil-want-keybinding nil)
  (setq evil-want-C-u-scroll t)
  (setq evil-want-C-i-jump t)
  (setq evil-shift-width 2)
  (setq evil-cross-lines t)
  (setq evil-respect-visual-line-mode t)
  (setq evil-vsplit-window-below t)
  (setq evil-split-window-below t)
  :config
  (evil-mode 1)
  (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)

  (evil-global-set-key 'motion "j" 'evil-next-visual-line)
  (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

  (setq evil-want-fine-undo t)
  (evil-set-initial-state 'messages-buffer-mode 'normal)

  (use-package undo-tree
  :config
  (global-undo-tree-mode)
  (evil-set-undo-system 'undo-tree))
  
  (evil-set-initial-state 'dashboard-mode 'normal))

(use-package evil-collection
  :after evil
  :config
  (evil-collection-init))
#+end_src

#+RESULTS:
: t

** Key Chords

#+begin_src emacs-lisp
(use-package key-chord
  :config
  (key-chord-mode 1)
  (key-chord-define evil-insert-state-map "jk" 'evil-normal-state)
  (key-chord-define evil-insert-state-map "kj" 'evil-normal-state))
#+end_src

** Key Bindings

#+begin_src emacs-lisp
(use-package yasnippet :config (yas-global-mode))
(use-package yasnippet-snippets)
#+end_src
cbl
#+RESULTS:

** Hydra Transitive Bindings

#+begin_src emacs-lisp
(use-package hydra)
(defhydra hydra-text-scale (:timeout 4)
  "Adjust text size"
  ("j" text-scale-decrease "Out")
  ("k" text-scale-increase "In")
  ("q" nil "Quit" :exit t))

(abu/leader-keys
  "Ts" '(hydra-text-scale/body :which-key "Adjust text size"))
#+end_src

* Projectile

#+begin_src emacs-lisp
(use-package projectile
  :diminish projectile-mode
  :custom ((projectile-completion-system 'ivy))
  :bind-keymap
  ("C-c p" . projectile-command-map)
  :init
  ;; NOTE: Set this to the folder where you keep your Git repos!
  (when (file-directory-p "~/Projects/Code")
    (setq projectile-project-search-path '("~/Projects/Code")))
  (setq projectile-switch-project-action #'projectile-dired))
  :config
  (projectile-mode
  (abu/leader-keys
    "p" '(:keymap projectile-command-map :which-key "Project")))
#+end_src

** Counsel Projectile
   
#+begin_src emacs-lisp
(use-package counsel-projectile
  :config (counsel-projectile-mode))
#+end_src

* Magit
  
#+begin_src emacs-lisp
(use-package magit
  :custom
  (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))
  :config
  (abu/leader-keys
    "gs" '(magit-status :which-key "Magit status"))
#+end_src
  
* LSP

#+begin_src emacs-lisp
(defun abu/lsp-mode-setup ()
  (setq lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))
  (lsp-headerline-breadcrumb-mode))

(use-package lsp-mode
  :commands (lsp lsp-deferred)
  :hook (lsp-mode . abu/lsp-mode-setup)
  :init
  (setq lsp-keymap-prefix "C-c l")
  :config
  (lsp-enable-which-key-integration t))

(use-package lsp-ui
  :hook (lsp-mode . lsp-ui-mode)
  :config
  (setq lsp-ui-sideline-show-diagnostics t)
  :custom
  (lsp-ui-doc-position 'bottom))

(use-package lsp-treemacs
  :after lsp)
(abu/leader-keys
  "tt" '(treemacs :which-key "Open Treemacs"))

(use-package lsp-ivy)
#+end_src

#+RESULTS:

** Flycheck

#+begin_src emacs-lisp
(use-package flycheck
  :init (global-flycheck-mode))
#+end_src

** Tree sitter

#+begin_src emacs-lisp
(use-package tree-sitter
  :init
  (global-tree-sitter-mode))
(use-package tree-sitter-langs)
#+end_src

** Typescript

#+begin_src emacs-lisp
(use-package typescript-mode
  :mode "\\.ts\\'"
  :hook (typescript-mode . lsp-deferred)
  :config
  (setq typescript-indent-level 2))
#+end_src

** Java

#+begin_src emacs-lisp
(use-package lsp-java :config (add-hook 'java-mode-hook 'lsp))
(use-package dap-mode :after lsp-mode :config (dap-auto-configure-mode))
#+end_src

** Company Mode

#+begin_src emacs-lisp
(use-package company
  :after lsp-mode
  :hook (lsp-mode . company-mode)
  :bind (:map company-active-map
          ("<tab>" . company-complete-selection)
          ("C-l" . company-complete-selection))
        (:map lsp-mode-map
          ("<tab>" . company-complete-selection)
          ("C-l" . company-complete-selection))
  :custom
  (company-minimum-prefix-length 1)
  (company-idle-delay 0.0))

(use-package company-box
  :hook (company-mode . company-box-mode))
#+end_src

* Git Gutter

#+begin_src emacs-lisp
(use-package diff-hl
  :init
  (global-diff-hl-mode)
  (diff-hl-flydiff-mode)
  (diff-hl-dired-mode)
  (diff-hl-margin-mode))
#+end_src
