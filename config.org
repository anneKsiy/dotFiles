#+TITLE: anneKsiy's GNU Emacs Config
#+AUTHOR: Abdullah "anneKsiy" Adam

* Table of contents: :TOC:
  - [[Initial Config][Initial Config]]
  - [[Emacs GUI][Emacs GUI]]

* Initial Config
  ** The beginning
  This is the first GNU Emacs Config I have written from scratch, it starts here...

* Packages

#+begin_src emacs-lisp
(require 'package)

(setq package-archives '(("melpa" . "https://melpa.org/packages/")
                         ("org" . "https://orgmode.org/elpa/")
			 ("elpa" . "https://elpa.gnu.org/packages/")))

(package-initialize)
(unless package-archive-contents
  (package-refresh-contents))

(unless (package-installed-p 'use-package)
   (package-install 'use-package))

(require 'use-package)
(setq use-package-always-ensure t)
#+end_src

* General Tweaks

#+begin_src emacs-lisp
(setq scroll-margin 8)
(setq scroll-conservatively 100)
#+end_src

* Emacs GUI

** UI Tweaks
   
#+begin_src emacs-lisp
;; (scroll-bar-mode -1)
(tool-bar-mode -1)
;; (tooltip-mode -1)
(set-fringe-mode 10) ; Give some breathing room
(defvar abumacs/default-font-size 100)
(column-number-mode)
(global-display-line-numbers-mode 1)
(setq display-line-numbers-type 'relative)
;; (menu-bar-mode -1)
;; Disable line numbers for some modes
(dolist (mode '(org-mode-hook
                term-mode-hook))
  shell-mode-hook
                eshell-mode-hook
 (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+end_src

** Fonts

#+begin_src emacs-lisp
(set-face-attribute 'default nil :font "CaskaydiaCove Nerd Font Mono" :height 100)
#+end_src

** Theme

#+begin_src emacs-lisp
(use-package doom-themes
  :init (load-theme 'doom-nord))
#+end_src


** Rainbow Delimiters

#+begin_src emacs-lisp
(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

** All the icons
Remember to run M-x all-the-icons-install-fonts
#+begin_src emacs-lisp
(use-package all-the-icons)
#+end_src

** Modeline

#+begin_src emacs-lisp
(use-package doom-modeline
  :ensure t
  :init (doom-modeline-mode 1)
  :custom ((doom-modeline-height 15)))
#+end_src

** Which Key

#+begin_src emacs-lisp
(use-package which-key
  :init (which-key-mode)
  :diminish which-key-mode
  :config
  (setq which-key-idle-delay 0.3))
#+end_src

** Make ESC quit prompts

#+begin_src emacs-lisp
(global-set-key (kbd "<escape>") 'keyboard-escape-quit)
#+end_src

* Ivy Auto-complete

#+begin_src emacs-lisp
(use-package swiper)
(use-package ivy
  :diminish
  :bind (("C-s" . swiper)
         :map ivy-minibuffer-map
         ("TAB" . ivy-alt-done)	
         ("C-l" . ivy-alt-done)
         ("C-j" . ivy-next-line)
         ("C-k" . ivy-previous-line)
         :map ivy-switch-buffer-map
         ("C-k" . ivy-previous-line)
         ("C-l" . ivy-done)
         ("C-d" . ivy-switch-buffer-kill)
         :map ivy-reverse-i-search-map
         ("C-k" . ivy-previous-line)
         ("C-d" . ivy-reverse-i-search-kill))
  :config
  (ivy-mode 1))

(use-package ivy-rich
  :init
  (ivy-rich-mode 1))

;; counsel
(use-package counsel
  :bind (("M-x" . counsel-M-x)
         ("C-x b" . counsel-ibuffer)
         ("C-x C-f" . counsel-find-file)
         :map minibuffer-local-map
         ("C-r" . 'counsel-minibuffer-history)))
#+end_src

** Helpful

#+begin_src emacs-lisp
(use-package helpful
  :custom
  (counsel-describe-function-function #'helpful-callable)
  (counsel-describe-variable-function #'helpful-variable)
  :bind
  ([remap describe-function] . counsel-describe-function)
  ([remap describe-command] . helpful-command)
  ([remap describe-variable] . counsel-describe-variable)
  ([remap describe-key] . helpful-key))
#+end_src

* Key Bindings

** General Keybindings

#+begin_src emacs-lisp
(use-package general
  :config
  (general-create-definer abumacs/leader-keys
    :keymaps '(normal visual)
    :prefix "SPC"
    :global-prefix "C-SPC")

  (abumacs/leader-keys
    "t" '(:ignore t :which-key "Toggles")
    "tt" '(counsel-load-theme :which-key "Choose theme")))
#+end_src

** Evil Mode

#+begin_src emacs-lisp
(use-package evil
  :init
  (setq evil-want-integration t)
  (setq evil-want-keybinding nil)
  (setq evil-want-C-u-scroll t)
  (setq evil-want-C-i-jump t)
  (setq evil-shift-width 2)
  (setq evil-cross-lines t)
  (setq evil-respect-visual-line-mode t)
  (setq evil-vsplit-window-below t)
  (setq evil-split-window-below t)
  :config
  (evil-mode 1)
  (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)

  (evil-global-set-key 'motion "j" 'evil-next-visual-line)
  (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

  (evil-set-initial-state 'messages-buffer-mode 'normal)

  (evil-set-initial-state 'dashboard-mode 'normal))

(use-package evil-collection
  :after evil
  :config
  (evil-collection-init))
#+end_src

** Key Chords

#+begin_src emacs-lisp
(use-package key-chord
  :config
  (key-chord-mode 1)
  (key-chord-define evil-insert-state-map "jk" 'evil-normal-state)
  (key-chord-define evil-insert-state-map "kj" 'evil-normal-state))
#+end_src

** Hydra Transitive Bindings

#+begin_src emacs-lisp
(use-package hydra)
(defhydra hydra-text-scale (:timeout 4)
  "Adjust text size"
  ("j" text-scale-decrease "Out")
  ("k" text-scale-increase "In")
  ("q" nil "Quit" :exit t))

(abumacs/leader-keys
  "ts" '(hydra-text-scale/body :which-key "Adjust text size"))
#+end_src
